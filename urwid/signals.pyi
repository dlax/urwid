from typing import Any, Callable, Dict, Optional, Sequence, Tuple, Type

class MetaSignals(type):
    def __init__(cls, name: str, bases: Tuple[type, ...], d: Dict[str, Any]) -> None: ...

def setdefaultattr(obj: Any, name: str, value: Any) -> Any: ...

class Key: ...

class Signals:
    def __init__(self) -> None: ...
    def register(self, sig_cls: Type[Any], signals: Sequence[str]) -> None: ...
    def connect(self, obj: Any, name: str, callback: Callable[..., Any], user_arg: Optional[Any], weak_args: Optional[Sequence[Any]], user_args: Optional[Sequence[Any]]) -> Key: ...
    def disconnect(self, obj: Any, name: str, callback: Callable[..., Any], user_arg: Optional[Any], weak_args: Optional[Sequence[Any]], user_args: Optional[Sequence[Any]]) -> None: ...
    def disconnect_by_key(self, obj: Any, name: str, key: Key) -> None: ...
    def emit(self, obj: Any, name: str, *args: Any) -> bool: ...

def connect_signal(obj: Any, name: str, callback: Callable[..., Any], user_arg: Optional[Any], weak_args: Optional[Sequence[Any]], user_args: Optional[Sequence[Any]]) -> Key: ...
def disconnect_signal(obj: Any, name: str, callback: Callable[..., Any], user_arg: Optional[Any], weak_args: Optional[Sequence[Any]], user_args: Optional[Sequence[Any]]) -> None: ...
def disconnect_signal_by_key(obj: Any, name: str, key: Key) -> None: ...
def emit_signal(obj: Any, name: str, *args: Any) -> bool: ...
def register_signal(sig_cls: Type[Any], signals: Sequence[str]) -> None: ...
